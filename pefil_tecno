# Perfil tecnol√≥gico


perfil_tecno = pd.read_sql(perfil_tecno,session)

perfil_tecno.columns


print(perfil_tecno.head())
print(dataframe.groupby('categoria').size())

from sklearn.cluster import KMeans

cluster_datos=perfil_tecno

cluster_datos['x0']=cluster_datos['x0'].astype(int)
cluster_datos['x4']=cluster_datos['x4'].astype(int)
cluster_datos['x1']=cluster_datos['x1'].astype(int)
cluster_datos['x2']=cluster_datos['x2'].astype(int)
#cluster_datos['x3']=cluster_datos['x3'].astype(int)
#Elimino duplicados
cluster_datos=cluster_datos.drop_duplicates(['x0c','x1'])

print(cluster_datos.head())

# Mapping
bins = [17,22,35,45,65,75,100]
names = ["1","2","3","4","5","6",]

cluster_datos['x0'].describe()
cluster_datos['x7'] = pd.cut(cluster_datos['x1'], bins, labels=names)

cluster_datos['x7'] = cluster_datos['x7'].replace(np.nan, '1')

cluster_datos.groupby(cluster_datos['x7'])['x4'].count().hist()
cluster_datos.groupby(cluster_datos['x7'])['x4'].count().plot()

cluster_datos.columns

X=cluster_datos.iloc[:,[3,4]].values
print(cluster_datos.iloc[:,[3,4]])

wcss=[]

for i in range(1, 11):
    kmeans= KMeans(n_clusters = i, init = 'k-means++', max_iter= 300 , n_init = 10, random_state = 0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
    
plt.plot(range(1, 11), wcss)

kmeans = KMeans(n_clusters = 4,init = 'k-means++', max_iter= 300 , n_init = 10, random_state = 0)

y_kmeans = kmeans.fit_predict(X)

#Visualizar
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 200, c = 'yellow', label = 'Centroids')

plt.title('Cluster')
plt.xlabel('Argumento X')
plt.ylabel('Argumento Y')
plt.legend()
cluster_datos.columns
#uniendo dataset
cluster_datos['Cluster'] = pd.Series(y_kmeans, index=cluster_datos.index)



data_frame.to_sql(name='target_table_name', con=connection_object_name, if_exists = 'append', index=False)
